{"version":3,"sources":["components/home/Navbar.jsx","components/home/NumbersInput.jsx","services/database.js","components/home/Home.jsx","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","AppBar_default","position","Toolbar_default","style","justifyContent","Typography_default","variant","color","NumbersInput","_ref","number","incrementNumber","decrementNumber","className","index_es","onClick","size","aria-label","margin","width","id","label","type","value","InputLabelProps","shrink","Add_default","url","changeValue","data","axios","post","then","res","catch","err","response","getDBNumber","get","Home","state","DBNum","_this","getNumber","console","log","resetCounter","setState","_this$state","this","home_Navbar","home_NumbersInput","Component","Routes","Switch","Route","path","component","App","src_Routes","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95e69c96.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\nconst Navbar = () => {\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar style={{justifyContent:\"center\"}}>\n          <Typography variant=\"h6\" color=\"inherit\">\n            Edgewater Test\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n}\nexport default Navbar","import React from 'react'\nimport { TextField, Fab, Icon } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst NumbersInput = ({number, incrementNumber, decrementNumber}) => {\n  return (\n    <div className=\"add-remove-icons\"> \n        {/* Decrement number in one */}\n        <Fab \n        onClick={decrementNumber}\n        size=\"medium\"\n        color=\"secondary\"\n        aria-label=\"Dec\">\n            <Icon>remove_icon</Icon>\n        </Fab>\n        {/* Controlled input */}\n        <TextField\n          style={{margin:\"0 2em\", width:\"50px\"}}\n          id=\"standard-number\"\n          label=\"Número\"\n          type=\"number\"\n          value={number}\n          InputLabelProps={{\n            shrink: true,\n          }}\n          margin=\"normal\"\n        />\n        {/* Increment number in one */}\n        <Fab \n        onClick={incrementNumber}\n        size=\"medium\"\n        color=\"secondary\"\n        aria-label=\"Inc\">\n            <AddIcon/>\n        </Fab>\n    </div>\n  )\n}\n\nexport default NumbersInput\n","import axios from 'axios'\nconst url = 'https://edgewatertest.herokuapp.com/'\n\nexport const changeValue = (data) => {\n    return axios.post(url + \"changeValue\", data)\n    .then(res => res.data)\n    .catch(err => err.response)\n}\n\nexport const getDBNumber = () => {\n    return axios.get(url + \"getValue\")\n    .then(res => res.data[0])\n    .catch(err => err.response)\n}\n","import React, { Component } from 'react'\nimport Navbar from './Navbar';\nimport NumbersInput from './NumbersInput';\nimport { Button } from '@material-ui/core';\nimport { changeValue, getDBNumber } from '../../services/database'\n\nexport default class Home extends Component {\n    state = {\n        number: 1,\n        DBNum: null\n    }\n    // Increment number function\n    incrementNumber = () => {\n        let { number } = this.state\n        if(number === 100) return\n        number ++\n        changeValue(number)\n        .then(res => this.getNumber())\n        .catch(err => console.log(err))\n        \n    }\n    // Decrement number function\n    decrementNumber = () => {\n        let { number } = this.state\n        if(number === 0) return\n        number --\n        changeValue(number)\n        .then(res => this.getNumber())\n        .catch(err => console.log(err))\n    }\n\n    resetCounter = () => {\n        let defaultNumber = 1\n        changeValue(defaultNumber)\n        .then(res => this.getNumber())\n        .catch(err => console.log(err))\n    }\n\n    getNumber = () => {\n        getDBNumber()\n        .then(res => this.setState({DBNum:res.number, number:res.number}))\n        .catch(err => console.log(err))\n    }\n\n  render() {\n    const { number, DBNum } = this.state\n    const { incrementNumber, decrementNumber, resetCounter } = this\n    return (\n      <div>\n        <Navbar/>\n        <h1>¡Hola!</h1>\n        <p>Presiona el botón <b>+ </b>para incrementar el número, presiona el boton <b>- </b>para decrementarlo</p>\n        <NumbersInput incrementNumber={incrementNumber} decrementNumber={decrementNumber} number={number}/>\n        <Button onClick={resetCounter}>Reiniciar</Button>\n        <h4>Database info: {DBNum ? DBNum : \"Not changed\"}</h4>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './components/home/Home';\n\nconst Routes = () => {\n    return (\n        <Switch>\n            <Route path=\"/\" component={Home} />\n        </Switch>\n    )\n}\n\nexport default Routes","import React, { Component } from 'react';\nimport './App.css';\nimport Routes from './Routes'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Routes/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nconst WithRouter = () => <BrowserRouter><App/></BrowserRouter>\nReactDOM.render(<WithRouter/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}